{"version":3,"sources":["components/calculate-imc-button/index.js","components/patients-data/index.js","components/login-page/index.js","App.js","serviceWorker.js","index.js"],"names":["calculateImcButton","calculateImc","weight","height","toFixed","className","onClick","patientsRegistered","document","querySelectorAll","i","length","patientWeight","querySelector","patientHeight","textContent","DataPatient","scope","Login","React","useState","state","setState","id","name","type","aria-describedby","placeholder","event","preventDefault","myForm","inputedUser","login","value","inputedPassword","password","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRA4BeA,MA1Bf,WAcQ,SAASC,EAAaC,EAAQC,GAE1B,OADWD,GAAUC,EAASA,IAASC,QAAQ,GAIvD,OACI,6BACI,4BAAQC,UAAU,kBAAkBC,QApBf,WAGzB,IAFA,IAAIC,EAAqBC,SAASC,iBAAiB,aAE3CC,EAAI,EAAGA,EAAIH,EAAmBI,OAAQD,IAAK,CAC/C,IAAIE,EAAgBL,EAAmBG,GAAGG,cAAc,gBACpDC,EAAgBP,EAAmBG,GAAGG,cAAc,gBACvCN,EAAmBG,GAAGG,cAAc,aAE1CE,YAAcd,EAAaW,EAAcG,YAAaD,EAAcC,gBAY/E,gCCyBGC,MA7Cf,WACI,OACI,yBAAKX,UAAU,0EACX,wBAAIA,UAAU,oBAAd,4BACA,2BAAOA,UAAU,4BACb,+BACI,4BACI,wBAAIY,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,SAGR,+BACI,wBAAIZ,UAAU,YACV,wBAAIA,UAAU,aAAd,SACA,wBAAIA,UAAU,eAAd,OACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,cAElB,wBAAIA,UAAU,YACV,wBAAIA,UAAU,aAAd,UACA,wBAAIA,UAAU,eAAd,MACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,cAElB,wBAAIA,UAAU,YACV,wBAAIA,UAAU,aAAd,WACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,cAElB,wBAAIA,UAAU,YACV,wBAAIA,UAAU,aAAd,UACA,wBAAIA,UAAU,eAAd,MACA,wBAAIA,UAAU,eAAd,QACA,wBAAIA,UAAU,gBAI1B,kBAAC,EAAD,QCQGa,MAhDf,WAAkB,IAAD,EAEaC,IAAMC,WAFnB,mBAENC,EAFM,KAECC,EAFD,KAyBb,OACI,yBAAKjB,UAAU,uCAAuCkB,GAAG,QACrD,yBAAKlB,UAAU,iDACX,iDAEJ,0BAAMA,UAAU,kEAAkEkB,GAAG,UACjF,yBAAKlB,UAAU,qBACX,wCACA,2BAAOmB,KAAK,QAAQC,KAAK,OAAOpB,UAAU,eAAekB,GAAG,aAAaG,mBAAiB,YAAYC,YAAY,sBAEtH,yBAAKtB,UAAU,qBACX,wCACA,2BAAOmB,KAAK,WAAWC,KAAK,WAAWpB,UAAU,eAAekB,GAAG,gBAAgBI,YAAY,sBAEnG,yBAAKtB,UAAU,0BACX,4BAAQC,QApCL,SAACsB,GAChBA,EAAMC,iBAEN,IAAIC,EAAStB,SAASK,cAAc,WAGhCkB,EAAcD,EAAOE,MAAMC,MAC3BC,EAAkBJ,EAAOK,SAASF,MAHjB,aAKlBF,GAJsB,cAIYG,GACjCE,MAAM,4BAAD,OAA6BL,IAClCT,EAASN,IAPQ,aAQXe,GAPe,cAOmBG,EACxCE,MAAM,+BATW,aAUXL,EACNK,MAAM,sBAENA,MAAM,uBAmB+B/B,UAAU,mBAAvC,YAGPgB,ICjCEgB,MARf,WACI,OACI,yBAAKhC,UAAU,QACX,kBAAC,EAAD,QCIQiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACApC,SAASqC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5954327c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction calculateImcButton() {\n    const calculatePatientsIMC = () => {\n        let patientsRegistered = document.querySelectorAll('.paciente');\n    \n        for(let i = 0; i < patientsRegistered.length; i++) {\n            let patientWeight = patientsRegistered[i].querySelector('.info-weight');\n            let patientHeight = patientsRegistered[i].querySelector('.info-height');\n            let patientIMC = patientsRegistered[i].querySelector('.info-imc');\n\n            patientIMC.textContent = calculateImc(patientWeight.textContent, patientHeight.textContent);\n            \n            };\n        };\n        \n        function calculateImc(weight, height) {\n            let imc = (weight / (height * height)).toFixed(2);\n            return imc\n        };\n\n    return (\n        <div>\n            <button className=\"btn btn-primary\" onClick={calculatePatientsIMC}>Calcular IMC dos Pacientes</button>\n        </div>\n    );\n};\n\nexport default calculateImcButton;","import React from 'react';\nimport CalculateImcButton from '../calculate-imc-button';\n\nfunction DataPatient() {\n    return (\n        <div className=\"container justify-content-center d-flex flex-column align-items-center\">\n            <h2 className=\"mt-5 text-center\">MrBonini's Patients List</h2>\n            <table className=\"table col-sm-12 col-lg-6\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">Nome</th>\n                        <th scope=\"col\">Peso (Kg)</th>\n                        <th scope=\"col\">Altura (m)</th>\n                        <th scope=\"col\">IMC</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr className=\"paciente\">\n                        <td className=\"info-name\">Paulo</td>\n                        <td className=\"info-weight\">150</td>\n                        <td className=\"info-height\">1.93</td>\n                        <td className='info-imc'></td>\n                    </tr>\n                    <tr className=\"paciente\">\n                        <td className=\"info-nome\">Junior</td>\n                        <td className=\"info-weight\">80</td>\n                        <td className=\"info-height\">1.75</td>\n                        <td className=\"info-imc\"></td>\n                    </tr>\n                    <tr className=\"paciente\">\n                        <td className=\"info-nome\">Beatriz</td>\n                        <td className=\"info-weight\">47.5</td>\n                        <td className=\"info-height\">1.63</td>\n                        <td className=\"info-imc\"></td>\n                    </tr>\n                    <tr className=\"paciente\">\n                        <td className=\"info-nome\">Kaique</td>\n                        <td className=\"info-weight\">90</td>\n                        <td className=\"info-height\">1.75</td>\n                        <td className=\"info-imc\"></td>\n                    </tr>\n                </tbody>\n            </table>\n            <CalculateImcButton/>\n        </div>\n    )\n};\n\nexport default DataPatient;","import React from 'react';\nimport DataPatient from '../patients-data/index';\n\nfunction Login() {\n    \n    const [state, setState] = React.useState();\n\n    const checkLogin = (event) => {\n        event.preventDefault();\n\n        let myForm = document.querySelector('#myForm');\n        let registeredUser = \"mrbonini\";\n        let registeredPassword = \"Kaique123\";\n        let inputedUser = myForm.login.value;\n        let inputedPassword = myForm.password.value;\n\n        if(inputedUser === registeredUser && inputedPassword === registeredPassword) {\n            alert(`Bem vindo ao Sistema Dr. ${inputedUser}`);\n            setState(DataPatient)\n        } else if(inputedUser !== registeredUser && inputedPassword !== registeredPassword) {\n            alert(\"Login e Senha inválidos!\");\n        } else if(inputedUser !== registeredUser) {\n            alert(\"Login inválido!\");\n        } else {\n            alert(\"Senha inválida!\");\n        };\n    };\n\n    return (\n        <div className=\"row justify-content-center login-box\" id=\"main\">\n            <div className=\"container col-md-8 col-lg-8 text-center mt-10\">\n                <h1>Bonini Nutrition</h1>\n            </div>\n            <form className=\"col-md-8 col-lg-6 d-flex flex-column align-items-center my-form\" id=\"myForm\">\n                <div className=\"col-md-6 col-lg-5\">\n                    <label>Login</label>\n                    <input name=\"login\" type=\"text\" className=\"form-control\" id=\"loginInput\" aria-describedby=\"emailHelp\" placeholder=\"Insira seu login\"/>\n                </div>\n                <div className=\"col-md-6 col-lg-5\">\n                    <label>Senha</label>\n                    <input name=\"password\" type=\"password\" className=\"form-control\" id=\"passwordInput\" placeholder=\"Insira sua senha\"/>\n                </div>\n                <div className=\"col-md-6 col-lg-5 mt-2\">\n                    <button onClick={checkLogin} className=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n            {state}\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport './App.css';\nimport './bootstrap/css/bootstrap.css';\nimport Login from './components/login-page/index';\n\nfunction App() {\n    return (\n        <div className=\"mt-5\">\n            <Login/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}